ggplot(stat, aes(x =Quartile , y=value,fill=Quartile)) +
stat_boxplot(geom="errorbar")+
geom_boxplot(colour = "black",alpha=1,outlier.color = "black", outlier.shape = 20)+
scale_fill_manual(breaks =br ,values=fill)+ylab("Percentage %")+xlab("")+
facet_grid(type ~ SS) + ylim(c(0,100))+
theme(axis.text.x = element_text(hjust = 1,angle = 45),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
strip.text.x = element_text(face="bold", size=8,lineheight=5.0),
strip.text.y = element_text(face="bold", size=10,lineheight=5.0),
strip.background = element_rect(fill="lightgray", colour="black",size=1),
axis.line = element_line(size=1,colour="black"),
axis.text = element_text(size=8.5*k),
legend.position = "none",
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.background = element_blank())
#########################################################################################################
# Figure intermediary
dataset = "Chaussabel"
chau.stat <- read.table(paste("/home/aaron/git/geneSetAnnotation/src/results/AARONSEEEE_NF/newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/TermsVSRep.csv",sep=""),header = T,sep="\t")
# He cambiado manualmente los PerX por QX y GOUniversal por NUniver. (el punto hay que contarlo).
ssname <- c("Annotation","Ganesan","LC","PS", "Zhou","Resnik","Lin","Nunivers","DF","AIC")
#ssname <-c("Annotation","Ganesan","LC")
#ssname <- c("David","Lin")
chau.stat <- chau.stat[chau.stat$SS%in%ssname,]
chau.stat$SS<- factor(chau.stat$SS, levels = unique(ssname))
library(ggplot2)
k=1
ggplot(chau.stat, aes(x =SS , y=value)) +
stat_boxplot(geom="errorbar")+
geom_boxplot(colour = "black",fill= "#DCDCDC",alpha=1,outlier.color = "black", outlier.shape = 20)+
ylab("Number of terms")+xlab("")+ ylim(0,500)+
#facet_grid(~SS,scales = "free", space = "free") +
ggtitle("")+theme(axis.text.x = element_text(family ="sans",hjust = 1,angle = 45),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
axis.line = element_line(size=1,colour="black"),
axis.title = element_text(size=10),
axis.title.y = element_text(family ="sans",margin = margin(0,20,0,0)),
axis.title.x = element_text(family ="sans",margin = margin(20,0,0,0)),
axis.text = element_text(family ="sans",size=10),
#panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
#  panel.border =  element_rect(colour = "black", fill=NA, size=1),
panel.background = element_blank(),
plot.title = element_text(family ="sans",size=10,hjust = 0.5,face="bold",margin = margin(5,0,40,0)))
.Library
installed.packages()
?read.csv
?hclust
?print
?cutree
?paste
?c()
?c
installed.packages(lib.loc = NULL, priority = NULL,
noCache = FALSE, fields = NULL,
subarch = .Platform$r_arch, ...)
installed.packages(lib.loc = NULL, priority = NULL,
noCache = FALSE, fields = NULL,
subarch = .Platform$r_arch,)
pack <- installed.packages(lib.loc = NULL, priority = NULL,
noCache = FALSE, fields = NULL,
subarch = .Platform$r_arch,)
packpafffhbttv;mr
a
pack
pack <- installed.packages(lib.loc = NULL, priority = NULL,
noCache = FALSE, fields = NULL,
subarch = .Platform$r_arch,)
head(pack)
rP <- row.names(pack)
rp
rP
rP["utils"]
rP["cluster"]
rP[rP=="cluster"]
rP[rP=="utils"]
rP[rP=="base"]
rP[rP=="stat"]
rP[rP=="stats"]
installed.packages()
row.names(installed.packages())
"list" %in% row.names(installed.packages())
"cluster" %in% row.names(installed.packages())
?install.packages()
#args = commandArgs(trailingOnly=TRUE)
lpack <- c("optparse","fastcluster","cluster")
for(p in 1:length(lpack)){
if(lpack[p] %in% row.names(installed.packages())){
library(lpack[p])
}else{
install.packages(lpack[p],dependencies = TRUE)
}
}
lpack[p]
lpack[p]
# test if there is at least one argument: if not, return an error
#args = commandArgs(trailingOnly=TRUE)
lpack <- c("optparse","fastcluster","cluster")
for(p in 1:length(lpack)){
if(lpack[p] %in% row.names(installed.packages())){
library(lpack[p])
}else{
install.packages(lpack[p],dependencies = TRUE)
}
}
library(lpack[p])
lpack[p]
# test if there is at least one argument: if not, return an error
#args = commandArgs(trailingOnly=TRUE)
lpack <- c("optparse","fastcluster","cluster")
for(p in 1:length(lpack)){
if(lpack[p] %in% row.names(installed.packages())){
str <- lpack[p]
print(length(str))
library(str)
}else{
install.packages(lpack[p],dependencies = TRUE)
}
}
str
?library
library(str,character.only=T)
# test if there is at least one argument: if not, return an error
#args = commandArgs(trailingOnly=TRUE)
lpack <- c("optparse","fastcluster","cluster")
for(p in 1:length(lpack)){
if(lpack[p] %in% row.names(installed.packages())){
str <- lpack[p]
print(length(str))
library(str,character.only=T)
}else{
install.packages(lpack[p],dependencies = TRUE)
}
}
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../../results/")
resFile = "visualization/"
if(!dir.exists(resFile)){
dir.create(resFile)
}
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
#Chau
dataset = "Chaussabel"
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
head(t)
nm <- t$Module
nm <- as.character(t$Module)
nm <- as.numeric(gsub("M", "", group))
nm <- as.numeric(gsub("M", "", nm))
head(nm)
t <- cbind(t,"num"=nm)
?order
nt <- t[order(nm),]
head(nt)
t <- t[order(nm),]
tiff(filename = "visualization/Figure_Chaussabel_Sup.tiff",compression = "lzw",pointsize = 12,
width = 8250,height=3250,res=400)
lineplots(t)
dev.off()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../../results/")
resFile = "visualization/"
if(!dir.exists(resFile)){
dir.create(resFile)
}
##########################################################################################
lineplots <- function(t){
require(ggplot2)
k=1
l <- list()
count = 0
n = length(t$Module)/5
for(x in 1:5){
a <- 1 + count
if(x == 5){
b <- length(t$Module)
}else{
b <- n+ count
}
ccc <- t[a:b,]
count = count +n
l[[x]] <- ggplot(ccc, aes(x = Module, y=value,group = SS))+
geom_line(aes(linetype=SS, color = SS))+
ylim(0,100)+
scale_x_discrete("Modules") +
#scale_colour_grey( start = 0.2, end = 0.8, na.value = "red")+
#scale_y_continuous("Percentage of covered genes")+
theme(axis.text.x = element_text(hjust = 0.5),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
axis.line = element_line(size=1,colour="black"),
axis.title = element_text(size=10*k),
axis.title.y = element_blank(), #element_text(margin = margin(0,20,0,0)),
axis.title.x =element_blank(), #element_text(margin = margin(20,0,0,0)),
axis.text = element_text(size=8*k),
#panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# panel.border = element_blank(),
legend.key = element_rect(fill = "white", colour = "white"),
legend.title = element_text(face = "bold"),
legend.title.align=0.5,
panel.background = element_blank(),
plot.margin = margin(t = 15, r = 15, b = 15, l = 15, unit = "pt"),
plot.title = element_text(size=25*k,hjust = 0.5,face="bold",margin = margin(5,0,40,0)))
}
library(gtable)
legend = gtable_filter(ggplotGrob(l[[1]]), "guide-box")
library(grid)
library(gridExtra)
grid.arrange(arrangeGrob(l[[1]]+ theme(legend.position="none"),
l[[2]] + theme(legend.position="none"),
l[[3]] + theme(legend.position="none"),
l[[4]]+ theme(legend.position="none"),
l[[5]] + theme(legend.position="none"),
nrow=5, ncol = 1),
left = textGrob("\nPercentage of genes", rot = 90, vjust = 1),
legend,
bottom = textGrob("Chaussabel modules"),
widths=unit.c(unit(0.95, "npc") - legend$width, legend$width ))
}
#Chau
dataset = "Chaussabel"
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
nm <- as.character(t$Module)
nm <- as.numeric(gsub("M", "", nm))
t <- cbind(t,"num"=nm)
t <- t[order(nm),]
tiff(filename = "visualization/Figure_Chaussabel_Sup.tiff",compression = "lzw",pointsize = 12,
width = 8250,height=3250,res=400)
lineplots(t)
dev.off()
lineplots(t)
head(t)
lineplots <- function(t){
require(ggplot2)
k=1
l <- list()
count = 0
n = length(t$Module)/5
for(x in 1:5){
a <- 1 + count
if(x == 5){
b <- length(t$Module)
}else{
b <- n+ count
}
ccc <- t[a:b,]
count = count +n
print(head(ccc))
l[[x]] <- ggplot(ccc, aes(x = Module, y=value,group = SS))+
geom_line(aes(linetype=SS, color = SS))+
ylim(0,100)+
scale_x_discrete("Modules") +
#scale_colour_grey( start = 0.2, end = 0.8, na.value = "red")+
#scale_y_continuous("Percentage of covered genes")+
theme(axis.text.x = element_text(hjust = 0.5),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
axis.line = element_line(size=1,colour="black"),
axis.title = element_text(size=10*k),
axis.title.y = element_blank(), #element_text(margin = margin(0,20,0,0)),
axis.title.x =element_blank(), #element_text(margin = margin(20,0,0,0)),
axis.text = element_text(size=8*k),
#panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# panel.border = element_blank(),
legend.key = element_rect(fill = "white", colour = "white"),
legend.title = element_text(face = "bold"),
legend.title.align=0.5,
panel.background = element_blank(),
plot.margin = margin(t = 15, r = 15, b = 15, l = 15, unit = "pt"),
plot.title = element_text(size=25*k,hjust = 0.5,face="bold",margin = margin(5,0,40,0)))
}
library(gtable)
legend = gtable_filter(ggplotGrob(l[[1]]), "guide-box")
library(grid)
library(gridExtra)
grid.arrange(arrangeGrob(l[[1]]+ theme(legend.position="none"),
l[[2]] + theme(legend.position="none"),
l[[3]] + theme(legend.position="none"),
l[[4]]+ theme(legend.position="none"),
l[[5]] + theme(legend.position="none"),
nrow=5, ncol = 1),
left = textGrob("\nPercentage of genes", rot = 90, vjust = 1),
legend,
bottom = textGrob("Chaussabel modules"),
widths=unit.c(unit(0.95, "npc") - legend$width, legend$width ))
}
#Chau
dataset = "Chaussabel"
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
nm <- as.character(t$Module)
nm <- as.numeric(gsub("M", "", nm))
t <- cbind(t,"num"=nm)
t <- t[order(nm),]
tiff(filename = "visualization/Figure_Chaussabel_Sup.tiff",compression = "lzw",pointsize = 12,
width = 8250,height=3250,res=400)
lineplots(t)
dev.off()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../../results/")
resFile = "visualization/"
if(!dir.exists(resFile)){
dir.create(resFile)
}
##########################################################################################
lineplots <- function(t){
require(ggplot2)
k=1
l <- list()
count = 0
n = length(t$Module)/5
for(x in 1:5){
a <- 1 + count
if(x == 5){
b <- length(t$Module)
}else{
b <- n+ count
}
ccc <- t[a:b,]
count = count +n
print(head(ccc))
l[[x]] <- ggplot(ccc, aes(x = Module, y=value,group = SS))+
geom_line(aes(linetype=SS, color = SS))+
ylim(0,100)+
scale_x_discrete("Modules") +
#scale_colour_grey( start = 0.2, end = 0.8, na.value = "red")+
#scale_y_continuous("Percentage of covered genes")+
theme(axis.text.x = element_text(hjust = 0.5),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
axis.line = element_line(size=1,colour="black"),
axis.title = element_text(size=10*k),
axis.title.y = element_blank(), #element_text(margin = margin(0,20,0,0)),
axis.title.x =element_blank(), #element_text(margin = margin(20,0,0,0)),
axis.text = element_text(size=8*k),
#panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# panel.border = element_blank(),
legend.key = element_rect(fill = "white", colour = "white"),
legend.title = element_text(face = "bold"),
legend.title.align=0.5,
panel.background = element_blank(),
plot.margin = margin(t = 15, r = 15, b = 15, l = 15, unit = "pt"),
plot.title = element_text(size=25*k,hjust = 0.5,face="bold",margin = margin(5,0,40,0)))
}
library(gtable)
legend = gtable_filter(ggplotGrob(l[[1]]), "guide-box")
library(grid)
library(gridExtra)
grid.arrange(arrangeGrob(l[[1]]+ theme(legend.position="none"),
l[[2]] + theme(legend.position="none"),
l[[3]] + theme(legend.position="none"),
l[[4]]+ theme(legend.position="none"),
l[[5]] + theme(legend.position="none"),
nrow=5, ncol = 1),
left = textGrob("\nPercentage of genes", rot = 90, vjust = 1),
legend,
bottom = textGrob("Chaussabel modules"),
widths=unit.c(unit(0.95, "npc") - legend$width, legend$width ))
}
#Chau
dataset = "Chaussabel"
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
nm <- as.character(t$Module)
nm <- as.numeric(gsub("M", "", nm))
t <- cbind(t,"num"=nm)
t <- t[order(nm),]
tiff(filename = "visualization/Figure_Chaussabel_Sup.tiff",compression = "lzw",pointsize = 12,
width = 8250,height=3250,res=400)
lineplots(t)
dev.off()
dataset = "BTM"
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
tiff(filename = "visualization/Figure_BTM_Sup.tiff",compression = "lzw",pointsize = 12,
width = 8250,height=3250,res=400)
lineplots(t)
dev.off()
tiff(filename = "visualization/Figure_BTM_Sup2.tiff",compression = "lzw",pointsize = 10,
width = 2250,height=8250,res=400)
ggplot(data = t, aes(x=SS, y=Module, fill=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 50, limit = c(0,100), space = "Lab",
name="Percentage") +
geom_tile()+
theme(axis.text.x = element_text(hjust = 0.5),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
axis.line = element_line(size=1,colour="black"),
axis.title = element_text(size=10*k),
axis.title.y = element_blank(), #element_text(margin = margin(0,20,0,0)),
axis.title.x =element_blank(), #element_text(margin = margin(20,0,0,0)),
axis.text = element_text(size=8*k),
#panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# panel.border = element_blank(),
legend.key = element_rect(fill = "white", colour = "white"),
legend.title = element_text(face = "bold"),
legend.title.align=0.5,
panel.background = element_blank(),
plot.margin = margin(t = 15, r = 15, b = 15, l = 15, unit = "pt"),
plot.title = element_text(size=25*k,hjust = 0.5,face="bold",margin = margin(5,0,40,0)))
dev.off()
k=1
ggplot(data = t, aes(x=SS, y=Module, fill=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 50, limit = c(0,100), space = "Lab",
name="Percentage") +
geom_tile()+
theme(axis.text.x = element_text(hjust = 0.5),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
axis.line = element_line(size=1,colour="black"),
axis.title = element_text(size=10*k),
axis.title.y = element_blank(), #element_text(margin = margin(0,20,0,0)),
axis.title.x =element_blank(), #element_text(margin = margin(20,0,0,0)),
axis.text = element_text(size=8*k),
#panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# panel.border = element_blank(),
legend.key = element_rect(fill = "white", colour = "white"),
legend.title = element_text(face = "bold"),
legend.title.align=0.5,
panel.background = element_blank(),
plot.margin = margin(t = 15, r = 15, b = 15, l = 15, unit = "pt"),
plot.title = element_text(size=25*k,hjust = 0.5,face="bold",margin = margin(5,0,40,0)))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../../results/")
resFile = "visualization/"
if(!dir.exists(resFile)){
dir.create(resFile)
}
##########################################################################################
lineplots <- function(t){
require(ggplot2)
k=1
l <- list()
count = 0
n = length(t$Module)/5
for(x in 1:5){
a <- 1 + count
if(x == 5){
b <- length(t$Module)
}else{
b <- n+ count
}
ccc <- t[a:b,]
count = count +n
print(head(ccc))
l[[x]] <- ggplot(ccc, aes(x = Module, y=value,group = SS))+
geom_line(aes(linetype=SS, color = SS))+
ylim(0,100)+
scale_x_discrete("Modules") +
#scale_colour_grey( start = 0.2, end = 0.8, na.value = "red")+
#scale_y_continuous("Percentage of covered genes")+
theme(axis.text.x = element_text(hjust = 0.5),
axis.line.x=element_line(size=0.5*k, colour="black"),
axis.line.y = element_line(size=0.5*k,colour="black"),
axis.line = element_line(size=1,colour="black"),
axis.title = element_text(size=10*k),
axis.title.y = element_blank(), #element_text(margin = margin(0,20,0,0)),
axis.title.x =element_blank(), #element_text(margin = margin(20,0,0,0)),
axis.text = element_text(size=8*k),
#panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# panel.border = element_blank(),
legend.key = element_rect(fill = "white", colour = "white"),
legend.title = element_text(face = "bold"),
legend.title.align=0.5,
panel.background = element_blank(),
plot.margin = margin(t = 15, r = 15, b = 15, l = 15, unit = "pt"),
plot.title = element_text(size=25*k,hjust = 0.5,face="bold",margin = margin(5,0,40,0)))
}
library(gtable)
legend = gtable_filter(ggplotGrob(l[[1]]), "guide-box")
library(grid)
library(gridExtra)
grid.arrange(arrangeGrob(l[[1]]+ theme(legend.position="none"),
l[[2]] + theme(legend.position="none"),
l[[3]] + theme(legend.position="none"),
l[[4]]+ theme(legend.position="none"),
l[[5]] + theme(legend.position="none"),
nrow=5, ncol = 1),
left = textGrob("\nPercentage of genes", rot = 90, vjust = 1),
legend,
bottom = textGrob("Chaussabel modules"),
widths=unit.c(unit(0.95, "npc") - legend$width, legend$width ))
}
#Chau
dataset = "Chaussabel"
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
nm <- as.character(t$Module)
nm <- as.numeric(gsub("M", "", nm))
t <- cbind(t,"num"=nm)
t <- t[order(nm),]
tiff(filename = "visualization/Figure_Chaussabel_Sup.tiff",compression = "lzw",pointsize = 12,
width = 8250,height=3250,res=400)
lineplots(t)
dev.off()
dataset = "BTM"
t<- read.table(paste("newBriefings_Incomplete/",dataset,"_3/Analysis_Rep/genCoverture.csv",sep=""),header = T)
nm <- as.character(t$Module)
nm <- as.numeric(gsub("M", "", nm))
t <- cbind(t,"num"=nm)
t <- t[order(nm),]
tiff(filename = "visualization/Figure_BTM_Sup.tiff",compression = "lzw",pointsize = 12,
width = 8250,height=3250,res=400)
lineplots(t)
dev.off()
